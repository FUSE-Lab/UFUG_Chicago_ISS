overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) != 1)]
a <- unlist(overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) == 1)])
b <- sapply(overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) != 1)],"[[",2)
PlotID <- bufferedData_30ft[c(a,b), ]$PlotID
###### Table Organization
library(dplyr)
library(sf)
# setwd("S:/Labs/HardimanLab/Isaac/Playing with Buckthorn Data/Playing with Buckthorn Data")
# setwd("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Output")
setwd("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Final_Publish")
# plotTable <- read.csv("metricsJoined2.csv")
# species_BA_list <- read.csv("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Output/Lindsay_Table/plotBAForBuckthorn1.csv")
species_BA_list <- read.csv("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Output/Lindsay_Table/plotBAForBuckthorn1.csv")
library(ggplot2)
FSD <- read.csv("./FSD_last_March_02.csv")
NDVI <- read.csv("./plots_Chicago_NAIP2017_NDVI_leaf_on_30ft_last.csv")
colnames(FSD)[1] <- "PlotID"
FSD_NDVI <- merge(NDVI, FSD, by = "PlotID")
colnames(FSD_NDVI)[3] <- "value"
FSD_NDVI <- FSD_NDVI[which(FSD_NDVI$PlotID %in% PlotID), ]
sum(grepl("A", FSD_NDVI$PlotID))
sum(grepl("B", FSD_NDVI$PlotID))
sum(grepl("C", FSD_NDVI$PlotID))
sum(grepl("D", FSD_NDVI$PlotID))
sum(grepl("E", FSD_NDVI$PlotID))
FSD_NDVI <- FSD_NDVI[FSD_NDVI$plot.area > 260 * 0.7, ]
dim(FSD_NDVI)
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
colnames(FSD)[1] <- "PlotID"
FSD_NDVI <- merge(NDVI, FSD, by = "PlotID")
colnames(FSD_NDVI)[3] <- "value"
FSD_NDVI <- FSD_NDVI[which(FSD_NDVI$PlotID %in% PlotID), ]
sum(grepl("A", FSD_NDVI$PlotID))
sum(grepl("B", FSD_NDVI$PlotID))
sum(grepl("C", FSD_NDVI$PlotID))
sum(grepl("D", FSD_NDVI$PlotID))
sum(grepl("E", FSD_NDVI$PlotID))
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^D", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^E", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^\\d", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
sum(grepl("A", FSD_NDVI$PlotID))
sum(grepl("B", FSD_NDVI$PlotID))
sum(grepl("C", FSD_NDVI$PlotID))
sum(grepl("D", FSD_NDVI$PlotID))
sum(grepl("E", FSD_NDVI$PlotID))
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^D", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^E", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^\\d", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "A")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "B")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "C")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "D")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "E")
sum(grepl("^B", bufferedData_30ft$PlotID))
sum(grepl("^C", bufferedData_30ft$PlotID))
sum(grepl("^E", bufferedData_30ft$PlotID))
sum(grepl("^\\d", bufferedData_30ft$PlotID))
FSD_NDVI <- FSD_NDVI[FSD_NDVI$plot.area > 260 * 0.7, ]
dim(FSD_NDVI)
# Final Plots
Final_plots <- FSD_NDVI$PlotID
bufferedData_30ft <- bufferedData_30ft[which(bufferedData_30ft$PlotID %in% Final_plots), ]
sum(grepl("^A", bufferedData_30ft$PlotID))
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "A")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "B")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "C")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "D")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "E")
sum(grepl("^B", bufferedData_30ft$PlotID))
sum(grepl("^C", bufferedData_30ft$PlotID))
sum(grepl("^E", bufferedData_30ft$PlotID))
sum(grepl("^\\d", bufferedData_30ft$PlotID))
sum(bufferedData_30ft[grep("^A", bufferedData_30ft$PlotID),]$invaded == "0")
# 99, 37
A <- bufferedData_30ft[grep("^A", bufferedData_30ft$PlotID),]
sum(bufferedData_30ft[grep("^B", bufferedData_30ft$PlotID),]$invaded == "1")
sum(bufferedData_30ft[grep("^C", bufferedData_30ft$PlotID),]$invaded == "0")
sum(bufferedData_30ft[grep("^E", bufferedData_30ft$PlotID),]$invaded == "0")
sum(bufferedData_30ft[grep("^\\d", bufferedData_30ft$PlotID),]$invaded == "1")
443 - 136-31-55
sum(bufferedData_30ft[grep("^B", bufferedData_30ft$PlotID),]$invaded == "1")
sum(grepl("^B", bufferedData_30ft$PlotID))
55+31
+5
sum(grepl("B", FSD_NDVI$PlotID))
sum(grepl("B", FSD_NDVI$PlotID)) # local manager
sum(grepl("C", FSD_NDVI$PlotID)) # local manager
sum(grepl("D", FSD_NDVI$PlotID)) #
sum(grepl("E", FSD_NDVI$PlotID)) #
sum(grepl("A", FSD_NDVI$PlotID)) # i-Tree
colnames(FSD)[1] <- "PlotID"
FSD_NDVI <- merge(NDVI, FSD, by = "PlotID")
colnames(FSD_NDVI)[3] <- "value"
FSD_NDVI <- FSD_NDVI[which(FSD_NDVI$PlotID %in% PlotID), ]
sum(grepl("A", FSD_NDVI$PlotID)) # i-Tree
sum(grepl("B", FSD_NDVI$PlotID)) # local manager
sum(grepl("C", FSD_NDVI$PlotID)) # local manager
sum(grepl("D", FSD_NDVI$PlotID)) #
sum(grepl("E", FSD_NDVI$PlotID)) # local manager
sum(grepl("^\\d", FSD_NDVI$PlotID)) # local manager
sum(grepl("^\\d", FSD_NDVI$PlotID)) # commu data
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^D", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^E", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^\\d", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI <- FSD_NDVI[FSD_NDVI$plot.area > 260 * 0.7, ]
dim(FSD_NDVI)
# Final Plots
Final_plots <- FSD_NDVI$PlotID
bufferedData_30ft <- bufferedData_30ft[which(bufferedData_30ft$PlotID %in% Final_plots), ]
sum(grepl("^A", bufferedData_30ft$PlotID))
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "A")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "B")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "C")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "D")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "E")
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^D", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^E", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^\\d", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
colnames(FSD)[1] <- "PlotID"
FSD_NDVI <- merge(NDVI, FSD, by = "PlotID")
colnames(FSD_NDVI)[3] <- "value"
FSD_NDVI <- FSD_NDVI[which(FSD_NDVI$PlotID %in% PlotID), ]
sum(grepl("A", FSD_NDVI$PlotID)) # i-Tree
sum(grepl("B", FSD_NDVI$PlotID)) # local manager
sum(grepl("C", FSD_NDVI$PlotID)) # local manager
sum(grepl("D", FSD_NDVI$PlotID)) #
sum(grepl("E", FSD_NDVI$PlotID)) # local manager
sum(grepl("^\\d", FSD_NDVI$PlotID)) # commu data
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^D", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^E", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^\\d", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
library(sf)
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/PlotPolygon/plot_points.shp")
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/plot_points.shp")
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/plot_points.shp")
gbif_plots <- st_read("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Final_ISS_GitHub/PlotPolygon/gbif_2017_2023_ISS_Forest_March_2024.shp")
plots <- plots[!grepl("D", plots$PlotID), ]
colnames(gbif_plots)[1] <- "PlotID"
gbif_plots$invaded <- 1
gbif_plots <- gbif_plots %>% dplyr::select(PlotID, invaded, geometry)
library(sf)
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/plot_points.shp")
gbif_plots <- st_read("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Final_ISS_GitHub/PlotPolygon/gbif_2017_2023_ISS_Forest_March_2024.shp")
gbif_plots <- st_read("C:/Users/star1/Documents/GitHub/Final_ISS_GitHub/PlotPolygon/gbif_2017_2023_ISS_Forest_March_2024.shp")
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/plot_points.shp")
gbif_plots <- st_read("C:/Users/star1/Documents/GitHub/Final_ISS_GitHub/PlotPolygon/gbif_2017_2023_ISS_Forest_March_2024.shp")
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/plot_points.shp")
gbif_plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/gbif_2017_2023_ISS_Forest_March_2024.shp")
plots <- plots[!grepl("D", plots$PlotID), ]
colnames(gbif_plots)[1] <- "PlotID"
gbif_plots$invaded <- 1
gbif_plots <- gbif_plots %>% dplyr::select(PlotID, invaded, geometry)
plots <- rbind(plots, gbif_plots)
plots
plots <- st_transform(plots, "EPSG:6455")
# mapview::mapview(gbif_selected.prj.NADft)
bufferedData <- st_buffer(plots, 60)
bufferedData_30ft <- st_buffer(plots, 30)
library(mapview)
mapview(list(bufferedData, bufferedData_30ft))
# st_write(bufferedData_30ft, "C:/Users/dhchoi/Documents/GitHub/Chicago-Invasives-Analysis/Final_Publish/Last_plots.shp")
bufferedData_30ft_union <- st_union(bufferedData_30ft) %>% st_cast("POLYGON")
overalapped_polygons <- st_intersects(bufferedData_30ft_union, bufferedData_30ft)
which(unlist(lapply(overalapped_polygons, length)) != 1)
overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) != 1)]
a <- unlist(overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) == 1)])
b <- sapply(overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) != 1)],"[[",2)
PlotID <- bufferedData_30ft[c(a,b), ]$PlotID
library(sf)
plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/plot_points.shp")
gbif_plots <- st_read("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub/PlotPolygon/gbif_2017_2023_ISS_Forest_March_2024.shp")
plots <- plots[!grepl("D", plots$PlotID), ]
colnames(gbif_plots)[1] <- "PlotID"
gbif_plots$invaded <- 1
gbif_plots <- gbif_plots %>% dplyr::select(PlotID, invaded, geometry)
plots <- rbind(plots, gbif_plots)
plots
plots <- st_transform(plots, "EPSG:6455")
# mapview::mapview(gbif_selected.prj.NADft)
bufferedData <- st_buffer(plots, 60)
bufferedData_30ft <- st_buffer(plots, 30)
library(mapview)
mapview(list(bufferedData, bufferedData_30ft))
bufferedData_30ft_union <- st_union(bufferedData_30ft) %>% st_cast("POLYGON")
overalapped_polygons <- st_intersects(bufferedData_30ft_union, bufferedData_30ft)
which(unlist(lapply(overalapped_polygons, length)) != 1)
overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) != 1)]
a <- unlist(overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) == 1)])
b <- sapply(overalapped_polygons[which(unlist(lapply(overalapped_polygons, length)) != 1)],"[[",2)
PlotID <- bufferedData_30ft[c(a,b), ]$PlotID
###### Table Organization
library(dplyr)
library(sf)
# setwd("S:/Labs/HardimanLab/Isaac/Playing with Buckthorn Data/Playing with Buckthorn Data")
# setwd("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Output")
setwd("C:/Users/star1/Documents/GitHub/ChicagoISSDetection/Final_ISS_GitHub")
# plotTable <- read.csv("metricsJoined2.csv")
# species_BA_list <- read.csv("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Output/Lindsay_Table/plotBAForBuckthorn1.csv")
species_BA_list <- read.csv("C:/Users/star1/Documents/GitHub/Chicago-Invasives-Analysis/Output/Lindsay_Table/plotBAForBuckthorn1.csv") #Ask Linday Darling for the data
library(ggplot2)
FSD <- read.csv("./FSD_last_March_02.csv")
NDVI <- read.csv("./plots_Chicago_NAIP2017_NDVI_leaf_on_30ft_last.csv")
colnames(FSD)[1] <- "PlotID"
FSD_NDVI <- merge(NDVI, FSD, by = "PlotID")
colnames(FSD_NDVI)[3] <- "value"
FSD_NDVI <- FSD_NDVI[which(FSD_NDVI$PlotID %in% PlotID), ]
sum(grepl("A", FSD_NDVI$PlotID)) # i-Tree
sum(grepl("B", FSD_NDVI$PlotID)) # local manager
sum(grepl("C", FSD_NDVI$PlotID)) # local manager
sum(grepl("D", FSD_NDVI$PlotID)) #
sum(grepl("E", FSD_NDVI$PlotID)) # local manager
sum(grepl("^\\d", FSD_NDVI$PlotID)) # commu data
FSD_NDVI[grep("^A", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^B", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^C", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^D", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^E", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI[grep("^\\d", FSD_NDVI[FSD_NDVI$plot.area <= 260 * 0.7, ]$PlotID),]
FSD_NDVI <- FSD_NDVI[FSD_NDVI$plot.area > 260 * 0.7, ]
dim(FSD_NDVI)
# Final Plots
Final_plots <- FSD_NDVI$PlotID
bufferedData_30ft <- bufferedData_30ft[which(bufferedData_30ft$PlotID %in% Final_plots), ]
sum(grepl("^A", bufferedData_30ft$PlotID))
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "A")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "B")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "C")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "D")
sum(substr(bufferedData_30ft$PlotID, 1, 1) == "E")
sum(grepl("^B", bufferedData_30ft$PlotID))
sum(grepl("^C", bufferedData_30ft$PlotID))
sum(grepl("^E", bufferedData_30ft$PlotID))
sum(grepl("^\\d", bufferedData_30ft$PlotID))
sum(bufferedData_30ft[grep("^A", bufferedData_30ft$PlotID),]$invaded == "0")
# 99, 37
A <- bufferedData_30ft[grep("^A", bufferedData_30ft$PlotID),]
sum(bufferedData_30ft[grep("^B", bufferedData_30ft$PlotID),]$invaded == "1")
sum(bufferedData_30ft[grep("^C", bufferedData_30ft$PlotID),]$invaded == "0")
sum(bufferedData_30ft[grep("^E", bufferedData_30ft$PlotID),]$invaded == "0")
sum(bufferedData_30ft[grep("^\\d", bufferedData_30ft$PlotID),]$invaded == "1")
443 - 136-31-55
library(ranger)
library(dplyr)
library(ggplot2)
library(caret)
library(randomForest)
#only lidar
FinalTable_filtered <- FSD_NDVI
aucc <- c()
model_list <- vector("list")
train_data <- c()
test_data <- c()
predicted <- c()
sss <- c()
# library(ROCR)
# library(plotROC)
library(pROC)
set.seed(4342)
rn <- sample(1:10000,9999)
cor(FinalTable_filtered$mean.max.canopy.ht, FinalTable_filtered$VCI)
cor(FinalTable_filtered$mean.max.canopy.ht, FinalTable_filtered$LAI)
cor(FinalTable_filtered$mean.max.canopy.ht, FinalTable_filtered$value)
cor(FinalTable_filtered$mean.max.canopy.ht, FinalTable_filtered$LAI_subcanopy)
cor(FinalTable_filtered$LAI, FinalTable_filtered$VCI)
cor(FinalTable_filtered$LAI, FinalTable_filtered$LAI_subcanopy)
cor(FinalTable_filtered$LAI, FinalTable_filtered$deepgap.fraction)
for (iter in 1:9999) {
set.seed(rn[iter])
ix <- sample(nrow(FinalTable_filtered), 0.7 * nrow(FinalTable_filtered))
train_data <- FinalTable_filtered[ix,]
test_data <- FinalTable_filtered[-ix,]
gls.binominal <- glm(invaded ~
scale(density) +
scale(mean.max.canopy.ht) +
scale(LAI_subcanopy) +
scale(LAI) +
scale(value)+
scale(VCI)
,
family = "binomial",
data = train_data)
model_list <- gls.binominal
# acc.train <- c(acc.train, mean(as.numeric(gls.binominal$fitted.values > 0.85) == train_data$invaded))
predicted <- predict(gls.binominal, test_data, type="response")
aucc <- c(aucc, auc(test_data$invaded, predicted))
}
mean(aucc)
max(aucc)
i <- which(aucc == max(aucc))
set.seed(rn[i])
ix <- sample(nrow(FinalTable_filtered), 0.7 * nrow(FinalTable_filtered))
train_data <- FinalTable_filtered[ix,]
test_data <- FinalTable_filtered[-ix,]
gls.binominal <- glm(invaded ~
scale(density) +
scale(mean.max.canopy.ht) +
scale(LAI_subcanopy) +
scale(LAI) +
scale(value)+
scale(VCI),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal, test_data, type="response")
auc(test_data$invaded, predicted)
performance::check_model(gls.binominal)
df_test <- data.frame(predicted, test_data$invaded)
colnames(df_test) <- c("ypred", "true")
library(ROCR)
library(plotROC)
library(pROC)
basicplot <- ggplot(df_test, aes(d = true, m = ypred)) + geom_roc()
basicplot + style_roc(theme = theme_grey) +
theme(axis.text = element_text(colour = "blue")) +
ggtitle("Invasive Shrub Species - Occurrence") +
annotate("text", x = .75, y = .25,
label = paste("AUC =", round(calc_auc(basicplot)$AUC, 2))) +
scale_x_continuous("1 - Specificity", breaks = seq(0, 1, by = .1))
hist(aucc)
threshold <- seq(0.2, 0.99, 0.001) # which is 1 or 0.
sensitivity_th <- c()
specificity_th <- c()
sss_s <- c()
library(caret)
for (th in threshold) {
predicted_values<-ifelse(predict(gls.binominal, test_data, type="response")>th, 1, 0)
actual_values<-test_data$invaded
conf_matrix<-table(predicted_values,actual_values)
sensitivity_th <- c(sensitivity_th, sensitivity(conf_matrix))
specificity_th <- c(specificity_th, specificity(conf_matrix))
sss_s <- sensitivity_th + specificity_th
}
df_sss <- data.frame(threshold, sensitivity_th, specificity_th, sss_s)
df_sss_melted <- reshape2::melt(df_sss, id = "threshold")
ggplot(df_sss_melted, aes(threshold, value, col = variable)) + geom_line()
threshold_last <- df_sss[df_sss$sss_s == max(df_sss), ]$threshold
threshold_last
acc.train <- c()
for (th in threshold_last) {
acc.train <- c(acc.train, mean(ifelse(predict(gls.binominal, test_data, type="response")>th, 1, 0)== test_data$invaded))
}
pred_inva <- as.vector(ifelse(predict(gls.binominal, test_data, type="response")>th, 1, 0))
test_data$invaded
library("MLmetrics")
F1_Score(pred_inva,test_data$invaded)
library("caret")
pred_inva <- as.factor(pred_inva)
test_data$invaded <- as.factor(test_data$invaded)
confusionMatrix(pred_inva, test_data$invaded,
mode = "everything",
positive="1")
# install.packages("devtools")
devtools::install_github("BlakeRMills/MoMAColors")
Effect_plots$data <- Effect_plots$data[-1, ]
Effect_plots <- sjPlot::plot_model(gls.binominal,
show.values = T,
type = "std2",
transform = NULL,
# axis.label = "Buffer Radius (m)",
title = "Presence of Invasive Shrub Species",
sort.est = T,
value.offset = 0.3,
value.size = 7) + theme_bw() + geom_hline(yintercept=0) +
theme(strip.text.x = element_text(size = 20),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
text = element_text(size = 20))
Effect_plots$data <- Effect_plots$data[-1, ]
Effect_plots
# wo NDVI
gls.binominal.wo_NDVI <- glm(invaded ~
scale(density) +
scale(mean.max.canopy.ht) +
scale(LAI_subcanopy) +
scale(LAI) +
scale(VCI),
# scale(value),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo_NDVI, test_data, type="response")
auc(test_data$invaded, predicted)
# wo Height
gls.binominal.wo_height <- glm(invaded ~
scale(density) +
# scale(mean.max.canopy.ht) +
scale(LAI_subcanopy) +
scale(LAI) +
scale(VCI) +
scale(value),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo_NDVI, test_data, type="response")
auc(test_data$invaded, predicted)
# wo LAI_sub
gls.binominal.wo_LAIsub <- glm(invaded ~
scale(density) +
scale(mean.max.canopy.ht) +
# scale(LAI_subcanopy) +
scale(LAI) +
scale(VCI) +
scale(value),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo_LAIsub, test_data, type="response")
auc(test_data$invaded, predicted)
# wo LiDAR
gls.binominal.wo_LiDAR <- glm(invaded ~
# scale(density) +
# scale(mean.max.canopy.ht) +
# scale(LAI_subcanopy) +
# scale(LAI) +
# scale(VCI) +
scale(value),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo_LiDAR, test_data, type="response")
auc(test_data$invaded, predicted)
# w height, ndvi
gls.binominal.w_h_nd <- glm(invaded ~
scale(density) +
scale(mean.max.canopy.ht) +
# scale(LAI_subcanopy) +
# scale(LAI) +
# scale(VCI) +
scale(value),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo_LiDAR, test_data, type="response")
auc(test_data$invaded, predicted)
# wo density
gls.binominal.wo.density <- glm(invaded ~
# scale(density) +
scale(mean.max.canopy.ht) +
scale(LAI_subcanopy) +
scale(LAI) +
scale(VCI) +
scale(value),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo.density, test_data, type="response")
auc(test_data$invaded, predicted)
gls.binominal.w.density_ndvi <- glm(invaded ~
scale(density) +
# scale(mean.max.canopy.ht) +
# scale(LAI_subcanopy) +
# scale(LAI) +
# scale(VCI) +
scale(value),
# scale(VCI):scale(LAI_subcanopy),
family = "binomial",
data = train_data)
predicted <- predict(gls.binominal.wo.density, test_data, type="response")
auc(test_data$invaded, predicted)
sjPlot::tab_model(gls.binominal, gls.binominal.wo.density, gls.binominal.wo_NDVI,
gls.binominal.wo_height, gls.binominal.wo_LAIsub,
gls.binominal.wo_LiDAR, gls.binominal.w_h_nd,
gls.binominal.w.density_ndvi,
show.aic = T,
show.aicc = T)
acc.train
######## Correlogram
library(GGally)
library(MoMAColors)
col2 <- moma.colors(
"Andri",
2,
type = c("discrete"), return_hex = T
# direction = c(1),
)
FinalTable_filtered <- FinalTable_filtered %>%
mutate(invaded_ch = case_when(invaded == 1 ~ "Invaded",
invaded == 0 ~ "Non-invaded"))
FinalTable_filtered$invaded_ch <- factor(FinalTable_filtered$invaded_ch,
levels = c("Non-invaded", "Invaded"))
pm <- ggpairs(FinalTable_filtered, columns = c(5, 17, 27, 29, 30, 3),
ggplot2::aes(colour=(invaded_ch), alpha = 0.2),
columnLabels = c("Density", "MoM_CH", "VCI", "VAI", "VAI_subcanpoy", "NDVI"),
upper = list(continuous = wrap("cor", size = 5)),
diag = list(continuous = wrap("box_no_facet", alpha=0.5)),
lower = list(continuous = "smooth"))  +
scale_colour_manual(values = c("#15134b", "#f56455")) +
scale_fill_manual(values = c("#15134b", "#f56455")) + theme_bw() +
theme(strip.text.x = element_text(size = 15),
strip.text.y = element_text(size = 15),
axis.text = element_text(size = 13))
pm
sum(FinalTable_filtered$invaded == 1)
max(FinalTable_filtered$q100)
min(FinalTable_filtered$q100)
